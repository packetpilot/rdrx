#!/bin/bash

# Copyright 2017 @packetpilot <point.it@howiget.email>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# files this hook alters
JSON=./addr.json
CONF=./rdrx.conf
README=./README.md

# json validation things
NAMECOUNT=$(jq .name "${JSON}" | grep -cv 'null')
TARGETCOUNT=$(jq .target "${JSON}" | grep -cv 'null')

# docker things
DKRTAG=rdrx
#DKRNAME=rdrx # defaults to $DKRTAG if unset, below
if [[ -z "${DKRNAME}" ]]; then
  DKRNAME="${DKRTAG}"
fi

# web server things
TLD=g0
#HOSTPORT=80 # defaults to 80 if unset, below
if [[ -z "${HOSTPORT}" ]]; then
  HOSTPORT=80
  URLBASE="${TLD}" # don't be noisy about a standard port
else
  URLBASE="${TLD}:${HOSTPORT}"
fi

# OS things
UNAME=$(uname)
HOSTFILE=/etc/hosts

# multi-platform things
if [[ "${UNAME}" == 'Darwin' ]]; then
  SED=$(which gsed)
  DATE=$(which gdate)
elif [[ "${UNAME}" == 'Linux' ]]; then
  SED='sed'
  DATE='date'
else
  echo "You seem to be running an unsupported OS."
  echo "This is supported on macOS & Linux."
  exit 1
fi
export SED DATE

# begin functions
prereq() {
  # tools
  if [[ "${UNAME}" == 'Darwin' ]]; then
    if [[ ! $(which gsed) ]]; then
      echo "You need GNU sed in your PATH."
      echo "Either edit the hook or install it."
      echo "On macOS, you can: \`brew install gnu-sed\`"
      exit 1
    fi
  elif [[ ! $(which sed) ]]; then
    echo "You need \`sed\` in your PATH."
    exit 1
  fi
  if [[ ! $(which docker) ]]; then
    echo "You need \`docker\` in your PATH."
    echo "See https://www.docker.com/get-docker for info."
    exit 1
  fi
  if [[ ! $(which jq) ]]; then
    echo "You need \`jq\` in your PATH."
    echo "See https://stedolan.github.io/jq/download/ for info."
    exit 1
  fi
  if [[ ! $(which sort) ]]; then
    echo "You need \`sort\` your PATH."
    exit 1
  fi
  # json
  echo "Checking json..."
  if [ "${NAMECOUNT}" != "${TARGETCOUNT}" ]; then
    echo "  [31mFailure[0m: ${JSON} name and target sums are disperate."
    exit 1
  else
    echo "  [32mSuccess[0m: ${JSON} name and target sums are equal."
  fi
  # /etc/hosts
  echo "Checking ${HOSTFILE}..."
  if [[ ! $(grep "${URLBASE}" "${HOSTFILE}" | grep '^127.0.0.1') ]]; then
    echo "  [31mFailure[0m: Couldn't find \"${URLBASE}\" in ${HOSTFILE}."
    echo "  Add a line such as \"127.0.0.1   ${URLBASE}\" to ${HOSTFILE}."
    exit 1
  else
    echo "  [32mSuccess[0m: \"${URLBASE}\" should loop back, per ${HOSTFILE}."
  fi
}

apache() {
  # sort addresses
  sort -u "${JSON}" -o "${JSON}"
  # conf head
  echo -e "# This file should be automatically built via the pre-commit hook.
  <VirtualHost *:80>
    # Begin Redirects" > "${CONF}"
  # conf contents
  jq -r '[.name, .target] | @sh' "${JSON}" | \
    while read -r line; do
      echo "    Redirect ${line}" >> "${CONF}"
    done
  # conf foot
  echo -e "    # End Redirects\n  </VirtualHost>" >> "${CONF}"
}

readme() {
  # nuke the README from the Redirects heading onward
  "${SED}" -i '/^## Redirects/,$d' "${README}"

  # insert heading and tabletop
  echo -e "## Redirects (do not manually edit)\nShortcut | URL\n--- | ---" \
    >> "${README}"

  # populate the table
  jq -r '[.name, .target] | @sh' "${JSON}" | \
    while read -r line; do
      echo "${URLBASE}${line}"
    done | \
    tr -d \' | tr " " \| >> "${README}"
}

dockerops() {
  # effect changes
  if [[ $(docker ps -a | grep "${DKRNAME}") ]]; then
    echo "Stopping and removing previous docker container \"${DKRNAME}\"..."
    printf "  Stopped: "
    docker stop "${DKRNAME}"
    start=$(($("${DATE}" +%s%N)/1000000))
    printf "  Removed: "
    docker rm "${DKRNAME}"
  else
    echo -e "No prior container named \"${DKRNAME}\" exists; continuing..."
  fi
  echo -e "Building and Starting New docker container \"${DKRNAME}\"..."
  docker build -t "${DKRTAG}" .
  printf "Running: "
  docker run -dit --name "${DKRNAME}" -p 127.0.0.1:"${HOSTPORT}":80 "${DKRTAG}"
  if [[ ! -z "${start}" ]]; then
    stop=$(($("${DATE}" +%s%N)/1000000))
    echo "  [33mTotal Downtime[0m: $((stop - start))" milliseconds
  fi
}

dockertests() {
  echo "Beginning base webserver test..."
  status=$(curl -Lsw "%{http_code}\n" "${URLBASE}" -o /dev/null)
  if [ "${status}" != 200 ]; then
    echo "  [31mFailure[0m: \"http://${URLBASE}\": Error ${status}"
    exit 1
  else
    echo "  [32mSuccess[0m: \"http://${URLBASE}\": ${status} OK"
  fi
  echo "Beginning individual redirects test..."
  jq -r '.name | @sh' "${JSON}" | tr -d "'" \
    | while read -r line; do
      status=$(curl -Lsw "%{http_code}\n" "${URLBASE}${line}" -o /dev/null)
      if [ "${status}" != 200 ] && [ "${status}" != 302 ]; then
        echo \
          "  [31mFailure[0m: ${URLBASE}${line}: Error ${status}"
        # exit 1 # uncomment this line if you'd like to be strict
      else
        echo "  [32mSuccess[0m: ${URLBASE}${line}: ${status} OK"
      fi
    done
}

gitops() {
  # add what has changed
  git add "${JSON}"
  git add "${CONF}"
  git add "${README}"
}
# end functions

# do things
prereq
apache
readme
dockerops
dockertests
gitops
